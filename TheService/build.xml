<project name="theservice" default="test"
    xmlns:ivy="antlib:org.apache.ivy.ant">

    <ivy:settings file="../ivysettings/ivysettings.xml"/>
    <import file="../version.xml" />

    <target name="init">
        <ivy:retrieve sync="true" type="jar,bundle,client,schema" pattern="lib/[artifact]-[type]-[revision].[ext]" log="quiet" />

        <uptodate targetfile="build/artifacts/theservice-service.ear" property="artifact.uptodate">
            <srcfiles dir= "src" includes="**/*"/>
            <srcfiles dir= "lib" includes="*"/>
            <srcfiles dir= "." includes="ivy.xml"/>
        </uptodate>
    </target>

    <target name="clean" description="Remove previous build">
        <delete dir="build" />
        <delete dir="lib" />
    </target>

    <target name="build-only-if-changed" unless="artifact.uptodate" depends="init">
        <echo message="${ant.project.name}: Changes found in source or dependencies, rebuilding artifact(s)." />
        <antcall target="build" />
        <antcall target="ivy-publish-local" />
    </target>

    <target name="build-and-publish-only-if-changed" unless="artifact.uptodate" depends="init">
        <echo message="${ant.project.name}: Changes found in source or dependencies, rebuilding artifact(s)." />
        <antcall target="build" />
        <antcall target="ivy-publish-local" />
        <antcall target="ivy-publish-shared" />
    </target>

    <target name="build" depends="jar">
        <mkdir dir="build/artifacts"/>
        <!-- <mkdir dir="build/war"/> -->
        <ear destfile="build/artifacts/theservice-service.ear" appxml="src/meta-inf/application.xml">
            <metainf dir="src/meta-inf" includes="application-*.xml,*-application*.xml"/>
            <!-- <fileset dir="build/war" includes="${ant.project.name}.war"/> -->
            <fileset dir="build/artifacts" includes="theservice.jar" />
            <fileset dir="lib" includes="*" />
        </ear>
    </target>

    <target name="deploy">
        <echo>TODO: Deploy code here!!! :-)</echo>
    </target>

    <target name="compile">
        <mkdir dir="build/classes"/>
        <javac srcdir="src" destdir="build/classes" includeantruntime="false" />
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="build/artifacts"/>
        <jar destfile="build/artifacts/theservice.jar" basedir="build/classes">
            <manifest>
                <attribute name="Main-Class" value="se.woop.TheService"/>
            </manifest>
        </jar>

        <jar destfile="build/artifacts/theservice-client.jar">
            <fileset dir="build/classes" includes="se/woop/TheClientClass.class"/>
        </jar>

        <jar destfile="build/artifacts/theservice-schema.jar">
            <fileset dir="build/classes" includes="se/woop/TheSchemaClass.class"/>
        </jar>
    </target>

    <target name="ivy-retrieve" description="retrieve dependencies with ivy">
        <!--
            Sync set to true will ensure that any extra files in lib directory is deleted.
            Type set to jar tells ivy to copy only jar artifacts. Source and javadoc artifacts are ignored.
            Some modules like log4j use bundle as type for jar artifact.
        -->
        <ivy:retrieve sync="true" type="jar,bundle" />
        
    </target>

    <target name="ivy-publish-local" description="Publish this build into repository">
        <ivy:resolve/>
        <ivy:publish resolver="local" status="integration" forcedeliver="true">
            <artifacts pattern="build/artifacts/[artifact]-[type].[ext]"/>
        </ivy:publish>
    </target>

    <target name="ivy-publish-shared" description="Publish this build into shared repository">
        <ivy:resolve/>
        <!-- <ivy:buildnumber resolver="shared" organisation="se.woop" module="theservice" revision="1.0" /> -->
        <!-- <echo message="Current revision is: ${ivy.revision}, new revision to be published will be: ${ivy.new.revision}" /> -->
        <ivy:publish resolver="shared" update="true" pubrevision="${version}">
            <artifacts pattern="build/artifacts/[artifact]-[type].[ext]" />
        </ivy:publish>
    </target>

    <target name="dependency-tree">
        <ivy:dependencytree />
    </target>

</project>
